{"version":3,"sources":["features/editor/editorSlice.js","features/editor/Editor.jsx","features/editor/Preview.jsx","App.js","store.js","index.js"],"names":["editorSlice","createSlice","name","initialState","value","preview","reducers","replaceText","state","action","payload","actions","Editor","dispatch","useDispatch","input","useSelector","editor","useEffect","id","onChange","event","target","preventDefault","marked","require","Preview","useState","markdown","setMarkdown","setOptions","breaks","parse","App","scriptTag","document","createElement","src","async","body","appendChild","className","configureStore","reducer","editorReducer","ReactDOM","render","StrictMode","store","getElementById"],"mappings":"gPAEaA,EAAcC,YAAY,CACnCC,KAAM,SACNC,aAAc,CACVC,MAAO,GACPC,QAAS,IAEbC,SAAU,CACNC,YAAa,SAACC,EAAOC,GACjBD,EAAMJ,MAAQK,EAAOC,QACrBF,EAAMH,QAAUI,EAAOC,YAKpBH,EAAgBP,EAAYW,QAA5BJ,YAEAP,IAAf,Q,OCgDeY,EA9DA,WACb,IAAMC,EAAWC,cACXC,EAAQC,aAAY,SAACR,GAAD,OAAWA,EAAMS,OAAOb,SA8ClDc,qBAAU,WACRL,EAASN,EA7CM,yrCA8Cd,IASH,OAAO,0BAAUY,GAAG,SAASf,MAAOW,EAAOK,SAPlB,SAACC,GACpBA,EAAMC,SACRT,EAASN,EAAYc,EAAMC,OAAOlB,QAClCiB,EAAME,sB,gBCxDNC,EAASC,EAAQ,IAcRC,EAZC,WACd,IAAMrB,EAAUW,aAAY,SAACR,GAAD,OAAWA,EAAMS,OAAOZ,WACpD,EAAgCsB,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KAOA,OALAX,qBAAU,WACRM,EAAOM,WAAW,CAAEC,QAAQ,IAC5BF,EAAYL,EAAOnB,MAClB,CAACA,IAEG,qBAAKc,GAAG,UAAR,SAAmBa,YAAMJ,MCUnBK,MAnBf,WAUE,OATAf,qBAAU,WACR,IAAMgB,EAAYC,SAASC,cAAc,UACzCF,EAAUG,IACR,kEACFH,EAAUI,OAAQ,EAClBH,SAASI,KAAKC,YAAYN,KACzB,IAID,sBAAKO,UAAU,MAAf,UACE,oDACA,cAAC,EAAD,IACA,cAAC,EAAD,QChBSC,cAAe,CAC1BC,QAAS,CACL1B,OAAQ2B,KCEhBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUC,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJb,SAASc,eAAe,W","file":"static/js/main.6f72fa25.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const editorSlice = createSlice({\r\n    name: 'editor',\r\n    initialState: {\r\n        value: '',\r\n        preview: '',\r\n    },\r\n    reducers: {\r\n        replaceText: (state, action) => {\r\n            state.value = action.payload;\r\n            state.preview = action.payload;\r\n        }\r\n    }\r\n})\r\n\r\nexport const { replaceText } = editorSlice.actions;\r\n\r\nexport default editorSlice.reducer;","import React, { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { replaceText } from \"./editorSlice\";\r\n\r\nconst Editor = () => {\r\n  const dispatch = useDispatch();\r\n  const input = useSelector((state) => state.editor.value);\r\n\r\n  const initialText = `# Welcome to my React Markdown Previewer!\r\n\r\n  ## This is a sub-heading...\r\n  ### And here's some other cool stuff:\r\n  \r\n  Heres some code, \\`<div></div>\\`, between 2 backticks.\r\n  \r\n  \\`\\`\\`\r\n  // this is multi-line code:\r\n  \r\n  function anotherExample(firstLine, lastLine) {\r\n    if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\r\n      return multiLineCode;\r\n    }\r\n  }\r\n  \\`\\`\\`\r\n  \r\n  You can also make text **bold**... whoa!\r\n  Or _italic_.\r\n  Or... wait for it... **_both!_**\r\n  And feel free to go crazy ~~crossing stuff out~~.\r\n  \r\n  There's also [links](https://www.freecodecamp.com), and\r\n  > Block Quotes!\r\n  \r\n  And if you want to get really crazy, even tables:\r\n  \r\n  Wild Header | Crazy Header | Another Header?\r\n  ------------ | ------------- | -------------\r\n  Your content can | be here, and it | can be here....\r\n  And here. | Okay. | I think we get it.\r\n  \r\n  - And of course there are lists.\r\n    - Some are bulleted.\r\n       - With different indentation levels.\r\n          - That look like this.\r\n  \r\n  \r\n  1. And there are numbererd lists too.\r\n  1. Use just 1s if you want!\r\n  1. And last but not least, let's not forget embedded images:\r\n  \r\n  ![React Logo w/ Text](https://goo.gl/Umyytc)`;\r\n\r\n  useEffect(() => {\r\n    dispatch(replaceText(initialText));\r\n  }, [])\r\n\r\n  const handleTextChange = (event) => {\r\n    if (event.target) {\r\n      dispatch(replaceText(event.target.value));\r\n      event.preventDefault();\r\n    }\r\n  };\r\n\r\n  return <textarea id=\"editor\" value={input} onChange={handleTextChange} />;\r\n};\r\n\r\nexport default Editor;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport parse from \"html-react-parser\";\r\nconst marked = require(\"marked\");\r\n\r\nconst Preview = () => {\r\n  const preview = useSelector((state) => state.editor.preview);\r\n  const [markdown, setMarkdown] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    marked.setOptions({ breaks: true});\r\n    setMarkdown(marked(preview));\r\n  }, [preview]);\r\n\r\n  return <div id='preview'>{parse(markdown)}</div>;\r\n};\r\n\r\nexport default Preview;\r\n","import './App.css';\nimport React, { useEffect } from 'react';\nimport Editor from './features/editor/Editor';\nimport Preview from './features/editor/Preview';\n\nfunction App() {\n  useEffect(() => {\n    const scriptTag = document.createElement(\"script\");\n    scriptTag.src =\n      \"https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js\";\n    scriptTag.async = true;\n    document.body.appendChild(scriptTag);\n  }, [])\n\n\n  return (\n    <div className=\"App\">\n      <h1>Markdown Previewer</h1>\n      <Editor />\n      <Preview />\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport editorReducer from './features/editor/editorSlice';\r\n\r\nexport default configureStore({\r\n    reducer: {\r\n        editor: editorReducer\r\n    },\r\n})","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport store from \"./store\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}